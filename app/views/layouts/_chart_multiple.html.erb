<% time_param = "t" if local_assigns[:time_param].nil? %>
<% if JSON.parse(data).empty? %>
  <h2>Empty Data</h2>
<% else %>
  <canvas id="<%= title %>_chart"></canvas>
  <script>
  {
    const ctx = document.getElementById('<%= title %>_chart').getContext('2d');
    const data = <%= raw data %>;
    const keys = <%= raw keys %>;
    const listByKey = (datum, key) => datum.map(obj => obj[key]);
    const time_param = "<%= time_param %>";
    const labels = {
      positionX: "PositionX",
      positionY: "PositionY",
      positionZ: "PositionZ",
      x: "PositionX",
      y: "PositionY",
      z: "PositionZ",
      r: "Yaw",
      dx: "BodyVelocityX",
      dy: "BodyVelocityY",
      dz: "BodyVelocityZ",
      w: "BodyAngVelocityYaw",
      roll: "Roll",
      pitch: "Pitch",
      throttle: "Throttle",
      yaw: "Yaw",
      white: "#fff",
    }
    const colors = {
      positionX: "rgb(255, 159, 159)",
      positionY: "rgb(159, 255, 159)",
      positionZ: "rgb(159, 159, 255)",
      x: "rgb(255, 127, 127)",
      y: "rgb(127, 255, 127)",
      z: "rgb(127, 127, 255)",
      r: "rgb(127, 127, 127)",
      dx: "rgb(255, 127, 127)",
      dy: "rgb(127, 255, 127)",
      dz: "rgb(127, 127, 255)",
      w: "rgb(127, 127, 127)",
      roll: "rgb(255, 127, 127)",
      pitch: "rgb(127, 255, 127)",
      throttle: "rgb(127, 127, 255)",
      yaw: "rgb(127, 127, 127)",
      white: "#fff",
    };
    const <%= title %>Chart = new Chart(ctx, {
      type: 'line',
      data: {
        datasets: data.map((datum, index) => keys.map(key => ({
            label: labels[key] + "_" + index,
            fill: false,
            borderColor: colors[key],
            pointBorderColor: colors[key],
            pointBackgroundColor: colors.white,
            pointHoverBackgroundColor: colors[key],
            pointHoverBorderColor: colors.white,
            data: datum.map(obj => ({
              x: obj[time_param],
              y: obj[key] * ("rwyaw".includes(key) ? 0.1 : 1)
            })),
          }))
        ).reduce((a, b) => a.concat(b))
      },
      options: {
        scales: {
          xAxes: [{
            type: 'linear',
            position: 'bottom'
          }]
        }
      }
    });
  }
  </script>
<% end %>
