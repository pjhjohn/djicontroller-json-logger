<% if JSON.parse(data).empty? %>
  <h1>Empty Data</h1>
<% else %>
  <canvas id="<%= title %>_3d_viewer" style="width:100%;height:100%;position:absolute;"></canvas>
  <script>
  {
    let clock, canvas, renderer;
    let scene, camera, cameraControls;
    const init = function() {
      // Data
      const data = <%= raw data %>;
      const dataGeom = new THREE.Geometry();
      data.map(datum => dataGeom.vertices.push(new THREE.Vector3(datum.x, datum.y, datum.z)));

      // Time, Canvas, Renderer and its Viewport
      clock = new THREE.Clock();
      canvas = document.getElementById('<%= title %>_3d_viewer');
      renderer = new THREE.WebGLRenderer({canvas: canvas});
      canvas.width  = canvas.clientWidth;
      canvas.height = canvas.clientHeight;
      renderer.setViewport(0, 0, canvas.clientWidth, canvas.clientHeight);

      // ThreeJS Scene & Camera
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(75, canvas.clientWidth/canvas.clientHeight, 0.1, 1000);
      camera.position.x = 2;
      camera.position.y = 2;
      camera.position.z = 2;

      // Camera Controls
      cameraControls = new THREE.TrackballControls(camera, renderer.domElement);
      cameraControls.target.set(0, 0, 0);

      // Grid & Axis
      const gridHelper = new THREE.GridHelper(5, 10);
      scene.add(gridHelper);
      const axisHelper = new THREE.AxisHelper(2);
      scene.add(axisHelper);

      // Trajectory
      const mLine = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 3});
      const trajectory = new THREE.Line(dataGeom, mLine);
      scene.add(trajectory);

      // Points
      const mPoints = new THREE.PointsMaterial({ color: 0x777777, size: 5, sizeAttenuation: false });
      const points = new THREE.Points(dataGeom, mPoints);
      scene.add(points);

      // Lighting
      const light = new THREE.DirectionalLight(0xffffff, 0.55);
      light.position.set(0, 0, 1);
      scene.add(light);

      // Drone Geometry for Animation
      const droneGeom = new THREE.Geometry();
      const droneMaterial = new THREE.MeshBasicMaterial({ color: 0x02c002 });
      droneGeom.vertices.push(
        new THREE.Vector3( 2, 0, 0),
        new THREE.Vector3(-1, 1, 0),
        new THREE.Vector3( 0, 0, 0),
        new THREE.Vector3( 1, 1, 0)
      );
      const drone = new THREE.Mesh(droneGeom, droneMaterial);
      drone.name = "drone";
      scene.add(drone);

      // Timeliner GUI
      const tracks = [
        {
          type: THREE.VectorKeyframeTrack,
          propertyPath: 'drone.position',
          initialValue: [ 0, 0, 0 ],
          interpolation: THREE.InterpolateSmooth
        },
        {
          type: THREE.QuaternionKeyframeTrack,
          propertyPath: 'drone.quaternion',
          initialValue: [ 0, 0, 0, 1 ],
          interpolation: THREE.InterpolateLinear

        }
      ];
      new Timeliner(new THREE.TimelinerController(scene, tracks, render));
    };

    // Render Main Loop
    const render = function () {
      const delta = clock.getDelta();
      requestAnimationFrame(render);
      cameraControls.update(delta);
      renderer.render(scene, camera);
    };

    init();
    render();
  }
  </script>
<% end %>
