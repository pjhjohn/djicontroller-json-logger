<% if data == "null" or JSON.parse(data).empty? %>
  <h6>Chart</h6>
  <h2>Empty Data</h2>
<% else %>
  <h6 id="<%= title %>_chart_header" class="chart-header">Chart</h6>
  <canvas id="<%= title %>_chart"></canvas>
  <script>
  {
    const ctx = document.getElementById('<%= title %>_chart').getContext('2d');
    const listByKey = (key) => data.map(obj => obj[key]);
    //noinspection JSAnnotator
    const data = <%= raw data %>;
    //noinspection JSAnnotator
    const keys = <%= raw keys %>;
    let displayLegend = true;
    const labels = {
       x:  "x",  y:  "y",  z:  "z",  rx:  "rx",  ry:  "ry",  rz:  "rz",
      dx: "dx", dy: "dy", dz: "dz", drx: "drx", dry: "dry", drz: "drz",
    };
    const colors = {
       x: "#FF7777",  y: "#77FF77",  z: "#7777FF",  rx: "#64F5F5",  ry: "#F564F5",  rz: "#F5F564",
      dx: "#FF7777", dy: "#77FF77", dz: "#7777FF", drx: "#64F5F5", dry: "#F564F5", drz: "#F5F564", white: "#FFFFFF",
    };
    const <%= title %>Chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: listByKey("t"),
        datasets: keys.map(key => ({
          label: labels[key],
          fill: false,
          borderColor: colors[key],
          pointBorderColor: colors[key],
          pointBackgroundColor: colors.white,
          pointHoverBackgroundColor: colors[key],
          pointHoverBorderColor: colors.white,
          data: listByKey(key),
          yAxisID: ['rotation', 'position'][+(["rx", "ry", "rz", "drz"].indexOf(key) == -1)],
        }))
      },
      options: {
        scales: {
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Time [ms]',
            },
            ticks: {
              beginAtZero:true,
            },
          }],
          yAxes: [{
            id: 'position',
            type: 'linear',
            position: 'left',
            scaleLabel: {
              display: true,
              labelString: ['Position : x, y, z in [m]', 'Velocity : dx, dy, dz in [m/s]'][+(["dx", "dy", "dz", "drz"].reduce((exist, key) => { return exist || keys.indexOf(key) > -1 }, false))],
            },
          },
          {
            id: 'rotation',
            type: 'linear',
            position: 'right',
            scaleLabel: {
              display: true,
              labelString: ['Rotation Angle : rx, ry, rz in [degree]', 'Rotation Angular Velocity : drz in [degree/s]'][+(["dx", "dy", "dz", "drz"].reduce((exist, key) => { return exist || keys.indexOf(key) > -1 }, false))],
            },
          }],
        },
        legend: {
          display: displayLegend,
        },
      },
    });
    document.querySelector('#<%= title %>_chart_header').addEventListener('click', (event) => {
      <%= title %>Chart.config.options.legend.display = displayLegend = !displayLegend;
      <%= title %>Chart.update();
    });
  }
  </script>
<% end %>
