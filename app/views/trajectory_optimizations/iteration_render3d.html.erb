<canvas id="3d_episode_renderer" style="width:100%;height:100%;position:absolute;"></canvas>
<div style="position:absolute;left:5px;top:5px;">
  <a href="/" class="btn btn-light">Home</a>
  <a href="/episodes/<%= @optimization.episode.id %>" class="btn btn-light">Episode</a>
  <a href="/trajectory_optimizations/<%= @optimization.id %>" class="btn btn-light">Trajectory Optimization</a>
  <% (0...@optimization.max_iteration_count).map do |i| %>
    <a href="/trajectory_optimizations/<%= @optimization.id %>/<%= i %>/render" class="btn btn-light">#<%= i %></a>
  <% end %>
</div>
<script>
  {
    let clock, canvas, renderer;
    let scene, camera, cameraControls, timelineController;

    const getRotationMatrixFromState = function(state) {
      const mat = new THREE.Matrix4();
      mat.multiply(new THREE.Matrix4().makeRotationX(Math.radians(state.rx)));
      mat.multiply(new THREE.Matrix4().makeRotationY(Math.radians(state.ry)));
      mat.multiply(new THREE.Matrix4().makeRotationZ(Math.radians(state.rz)));
      return mat;
    };

    const serializeTimelineData = function(refStates, simStates) {
      return {
        duration: refStates[refStates.length - 1].t / 1000.0,
        channels: {
          "ref_drone.position": {
            times: refStates.map(state => state.t / 1000.0),
            values: refStates.map(state => [state.x, state.y, state.z]).reduce((a, b) => a.concat(b)),
          },
          "ref_drone.quaternion": {
            times: refStates.map(state => state.t / 1000.0),
            values: refStates.map(state => {
              const quaternion = new THREE.Quaternion();
              quaternion.setFromRotationMatrix(getRotationMatrixFromState(state));
              return [quaternion.x, quaternion.y, quaternion.z, quaternion.w]
            }).reduce((a, b) => a.concat(b)),
          },
          "sim_drone.position": {
            times: simStates.map(state => state.t / 1000.0),
            values: simStates.map(state => [state.x, state.y, state.z]).reduce((a, b) => a.concat(b)),
          },
          "sim_drone.quaternion": {
            times: simStates.map(state => state.t / 1000.0),
            values: simStates.map(state => {
              const quaternion = new THREE.Quaternion();
              quaternion.setFromRotationMatrix(getRotationMatrixFromState(state));
              return [quaternion.x, quaternion.y, quaternion.z, quaternion.w]
            }).reduce((a, b) => a.concat(b)),
          },
        }
      };
    };

    const onWindowResize = function() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize( window.innerWidth, window.innerHeight );
    };

    const init = function() {
      // Data
      // noinspection JSAnnotator
      const refStates = <%= raw @optimization.episode.states %>;
      const refStatesGeom = new THREE.Geometry();
      refStates.map(state => refStatesGeom.vertices.push(new THREE.Vector3(state.x, state.y, state.z)));
      // noinspection JSAnnotator
      const simStates = <%= raw JSON.parse(@optimization.simulator_log_list)[@iteration_id].to_json %>;
      const simStatesGeom = new THREE.Geometry();
      simStates.map(state => simStatesGeom.vertices.push(new THREE.Vector3(state.x, state.y, state.z)));

      // Clock
      clock = new THREE.Clock();

      // Canvas
      canvas = document.getElementById('3d_episode_renderer');
      canvas.width  = canvas.clientWidth;
      canvas.height = canvas.clientHeight;

      // Renderer & onWindowsResize Event Registration
      renderer = new THREE.WebGLRenderer({ canvas: canvas });
      renderer.setViewport(0, 0, canvas.clientWidth, canvas.clientHeight);
      window.addEventListener('resize', onWindowResize, false);

      // ThreeJS Scene & Camera
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(75, canvas.clientWidth/canvas.clientHeight, 0.1, 1000);
      camera.up.set(0, 0, 1);
      camera.position.set(3, 3, 3);
      camera.lookAt(new THREE.Vector3(0, 0, 0));

      // Camera Controls
      cameraControls = new THREE.TrackballControls(camera, renderer.domElement);
      cameraControls.target.set(0, 0, 0);

      // Grid & Axis
      const gridHelper = new THREE.GridHelper(5, 10);
      gridHelper.rotation.setFromRotationMatrix(new THREE.Matrix4().makeRotationX(Math.radians(90)));
      scene.add(gridHelper);
      const axisHelper = new THREE.AxisHelper(2);
      scene.add(axisHelper);

      // Lighting
      const light = new THREE.DirectionalLight(0xffffff, 0.55);
      light.position.set(0, 0, 1);
      scene.add(light);

      // Drone Geometry
      const droneMaterial = new THREE.MeshBasicMaterial({ color: 0x02c002, side: THREE.DoubleSide, vertexColors: THREE.FaceColors });
      const droneGeom = new THREE.Geometry();
      droneGeom.vertices.push(
          new THREE.Vector3( 0.2, 0.0, 0.0),
          new THREE.Vector3(-0.1, 0.1, 0.0),
          new THREE.Vector3( 0.0, 0.0, 0.0),
          new THREE.Vector3(-0.1,-0.1, 0.0),
          new THREE.Vector3( 0.0, 0.0,0.05)
      );
      droneGeom.faces.push(
          new THREE.Face3(0, 1, 2),
          new THREE.Face3(2, 3, 0),
          new THREE.Face3(4, 0, 1),
          new THREE.Face3(4, 1, 2),
          new THREE.Face3(4, 2, 3),
          new THREE.Face3(4, 3, 0)
      );
      droneGeom.faces.map(face => face.color.setRGB(Math.random(), Math.random(), Math.random()));

      // Reference State Visualization : Trajectory
      const mRefLine = new THREE.LineBasicMaterial({ color: 0xff8888, linewidth: 1});
      const refTrajectory = new THREE.Line(refStatesGeom, mRefLine);
      scene.add(refTrajectory);
      // Reference State Visualization : Points
      const mRefPoints = new THREE.PointsMaterial({ color: 0x888888, size: 3, sizeAttenuation: false });
      const refPoints = new THREE.Points(refStatesGeom, mRefPoints);
      scene.add(refPoints);
      // Reference State Visualization : Orientation
      refStates.map(state => scene.add(new THREE.ArrowHelper(
        new THREE.Vector3(1, 0, 0).applyMatrix4(getRotationMatrixFromState(state)),
        new THREE.Vector3(state.x, state.y, state.z),
        0.5,
        0xff8888
      )));
      // Reference Drone Mesh for Animation
      const refDrone = new THREE.Mesh(droneGeom, droneMaterial);
      refDrone.name = "ref_drone";
      scene.add(refDrone);

      // Simulation State Visualization : Trajectory
      const mLine = new THREE.LineBasicMaterial({ color: 0x8888ff, linewidth: 1});
      const trajectory = new THREE.Line(simStatesGeom, mLine);
      scene.add(trajectory);
      // Simulation State Visualization : Points
      const mPoints = new THREE.PointsMaterial({ color: 0x888888, size: 3, sizeAttenuation: false });
      const points = new THREE.Points(simStatesGeom, mPoints);
      scene.add(points);
      // Simulation State Visualization : Orientation
      simStates.map(state => scene.add(new THREE.ArrowHelper(
        new THREE.Vector3(1, 0, 0).applyMatrix4(getRotationMatrixFromState(state)),
        new THREE.Vector3(state.x, state.y, state.z),
        0.5,
        0x8888ff
      )));
      // Reference Drone Mesh for Animation
      const simDrone = new THREE.Mesh(droneGeom, droneMaterial);
      simDrone.name = "sim_drone";
      scene.add(simDrone);

      // Timeliner GUI
      const tracks = [
        {
          type: THREE.VectorKeyframeTrack,
          propertyPath: 'ref_drone.position',
          initialValue: [ 0, 0, 0 ],
          interpolation: THREE.InterpolateSmooth
        },
        {
          type: THREE.QuaternionKeyframeTrack,
          propertyPath: 'ref_drone.quaternion',
          initialValue: [ 0, 0, 0, 1 ],
          interpolation: THREE.InterpolateLinear
        },
        {
          type: THREE.VectorKeyframeTrack,
          propertyPath: 'sim_drone.position',
          initialValue: [ 0, 0, 0 ],
          interpolation: THREE.InterpolateSmooth
        },
        {
          type: THREE.QuaternionKeyframeTrack,
          propertyPath: 'sim_drone.quaternion',
          initialValue: [ 0, 0, 0, 1 ],
          interpolation: THREE.InterpolateLinear
        }
      ];
      timelineController = new THREE.TimelinerController(scene, tracks, render);
      new Timeliner(timelineController);
      timelineController.deserialize(serializeTimelineData(refStates, simStates));
    };

    // Render Main Loop
    const render = function () {
      const delta = clock.getDelta();
      requestAnimationFrame(render);
      cameraControls.update(delta);
      renderer.render(scene, camera);
    };

    init();
    render();
  }
</script>
<style>
  .container.grid-960 {
    width: 100%;
    height: 100%;
    padding: 0;
  }
</style>
