<% if @episode.states == "null" or JSON.parse(@episode.states).empty? %>
  <h1>Empty Data</h1>
<% else %>
  <canvas id="3d_episode_renderer" style="width:100%;height:100%;position:absolute;"></canvas>
  <div style="position:absolute;left:5px;top:5px;">
    <a href="/" class="btn btn-light">Home</a>
    <a href="/episodes/<%= @episode.id %>" class="btn btn-light">Episode</a>
  </div>
  <script>
    {
      let clock, canvas, renderer;
      let scene, camera, cameraControls, timelineController;

      const getRotationMatrixFromState = function(state) {
        const mat = new THREE.Matrix4();
        mat.multiply(new THREE.Matrix4().makeRotationX(Math.radians(state.rx)));
        mat.multiply(new THREE.Matrix4().makeRotationY(Math.radians(state.ry)));
        mat.multiply(new THREE.Matrix4().makeRotationZ(Math.radians(state.rz)));
        return mat;
      };

      const serializeToTimelineData = function(statesMap) {
        const serialized = {
          duration: Math.max.apply(null, Object.keys(statesMap).map(key => statesMap[key][statesMap[key].length - 1].t)) / 1000.0,
          channels: {},
        };
        Object.keys(statesMap).forEach(key => {
          const states = statesMap[key];
          serialized.channels[key + '.position'] = {
            times: states.map(state => state.t / 1000.0),
            values: states.map(state => [state.x, state.y, state.z]).reduce((a, b) => a.concat(b)),
          };
          serialized.channels[key + '.quaternion'] = {
            times: states.map(state => state.t / 1000.0),
            values: states.map(state => {
              const quaternion = new THREE.Quaternion();
              quaternion.setFromRotationMatrix(getRotationMatrixFromState(state));
              return [quaternion.x, quaternion.y, quaternion.z, quaternion.w]
            }).reduce((a, b) => a.concat(b)),
          };
        });
        return serialized;
      };

      const onWindowResize = function() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
      };

      const initConfig = function() {
        // Clock
        clock = new THREE.Clock();

        // Canvas
        canvas = document.getElementById('3d_episode_renderer');
        canvas.width  = canvas.clientWidth;
        canvas.height = canvas.clientHeight;

        // Renderer & onWindowsResize Event Registration
        renderer = new THREE.WebGLRenderer({ canvas: canvas });
        renderer.setViewport(0, 0, canvas.clientWidth, canvas.clientHeight);
        window.addEventListener('resize', onWindowResize, false);

        // ThreeJS Scene & Camera
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(75, canvas.clientWidth/canvas.clientHeight, 0.1, 1000);
        camera.up.set(0, 1, 0);
        camera.position.set(5, -1, 5);

        // Camera Controls
        cameraControls = new THREE.TrackballControls(camera, renderer.domElement);
        cameraControls.target.set(5, -1, 0);

        // Grid & Axis
        const gridHelper = new THREE.GridHelper(10, 20);
        gridHelper.rotation.setFromRotationMatrix(new THREE.Matrix4().makeRotationX(Math.radians(90)));
        scene.add(gridHelper);
        const axisHelper = new THREE.AxisHelper(2);
        scene.add(axisHelper);

        // Lighting
        const light = new THREE.DirectionalLight(0xffffff, 0.55);
        light.position.set(0, 0, 1);
        scene.add(light);
      };

      const initScene = function() {
        // noinspection JSAnnotator
        const states = <%= raw @episode.states %>;
        const droneGeom = new THREE.Geometry();
        droneGeom.vertices.push(
          new THREE.Vector3( 0.2, 0.0, 0.0),
          new THREE.Vector3(-0.1, 0.1, 0.0),
          new THREE.Vector3( 0.0, 0.0, 0.0),
          new THREE.Vector3(-0.1,-0.1, 0.0),
          new THREE.Vector3( 0.0, 0.0,0.05)
        );
        droneGeom.faces.push(
          new THREE.Face3(0, 1, 2),
          new THREE.Face3(2, 3, 0),
          new THREE.Face3(4, 0, 1),
          new THREE.Face3(4, 1, 2),
          new THREE.Face3(4, 2, 3),
          new THREE.Face3(4, 3, 0)
        );
        droneGeom.faces.map(face => face.color.setRGB(Math.random(), Math.random(), Math.random()));

        const tracks = [];
        const registerTrack = function(name, color, states) {
          // Geometry
          const statesGeometry = new THREE.Geometry();
          states.map(state => statesGeometry.vertices.push(new THREE.Vector3(state.x, state.y, state.z)));

          // Material
          const trajectoryMaterial = new THREE.LineBasicMaterial({ color: color, linewidth: 1});
          const pointsMaterial = new THREE.PointsMaterial({ color: color, size: 3, sizeAttenuation: false });
          const droneMaterial = new THREE.MeshBasicMaterial({ color: color, side: THREE.DoubleSide, vertexColors: THREE.FaceColors });

          // Objects
          const trajectory = new THREE.Line(statesGeometry, trajectoryMaterial);
          const points = new THREE.Points(statesGeometry, pointsMaterial);
          const directions = states.map(state => new THREE.ArrowHelper(
            new THREE.Vector3(1, 0, 0).applyMatrix4(getRotationMatrixFromState(state)),
            new THREE.Vector3(state.x, state.y, state.z), 0.5, color
          ));
          const drone = new THREE.Mesh(droneGeom, droneMaterial);
          drone.name = name + '_drone';
          drone.scale.set(1, 1, 1);

          // Scene
          scene.add(trajectory);
          scene.add(points);
          directions.forEach(direction => scene.add(direction));
          scene.add(drone);

          // Track
          tracks.push({
            type: THREE.VectorKeyframeTrack,
            propertyPath: drone.name + '.position',
            initialValue: [ 0, 0, 0 ],
            interpolation: THREE.InterpolateSmooth
          });
          tracks.push({
            type: THREE.QuaternionKeyframeTrack,
            propertyPath: drone.name + '.quaternion',
            initialValue: [ 0, 0, 0, 1 ],
            interpolation: THREE.InterpolateLinear
          });
          return drone.name;
        };

        const episodeTrackName = registerTrack('episode', 0xff00ff, states);

        timelineController = new THREE.TimelinerController(scene, tracks, render);
        new Timeliner(timelineController);
        timelineController.deserialize(serializeToTimelineData({ [episodeTrackName]: states }));
      };

      const render = function () {
        const delta = clock.getDelta();
        requestAnimationFrame(render);
        cameraControls.update(delta);
        renderer.render(scene, camera);
      };

      initConfig();
      initScene();
      render();
    }
  </script>
  <style>
    .container.grid-960 {
      width: 100%;
      height: 100%;
      padding: 0;
    }
  </style>
<% end %>
